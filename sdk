#!/usr/bin/env node

/**************************************************************************************************
 * Imports
 **************************************************************************************************/

var chalk   = require("chalk"),
    fs      = require("fs"),
    path    = require("path"),
    program = require("commander"),
    shell   = require("shelljs");


/**************************************************************************************************
 * Variables
 *************************************************************************************************/

var colors = {
        error:   chalk.bold.red,
        success: chalk.bold.green,
        warning: chalk.keyword("orange"),
    },
    projectName = "AndcultureCode.CSharp.FactoryGirl",
    nugetUrl = "https://api.nuget.org/v3/index.json",
    version = "0.0.1";


/**************************************************************************************************
 * Functions
 *************************************************************************************************/

var ops = {
    echo(message, padTop, padBottom) {
        padBottom = padBottom === true;
        padTop    = padTop    === true;

        if (padTop) { this.echoNewline(); }
        shell.echo(message);
        if (padBottom) { this.echoNewline(); }
    },

    echoError(message, padTop, padBottom, prefix) {
        prefix = prefix === undefined || prefix === null ? "Error: " : prefix + " ";
        this.echo(colors.error(prefix + message), padTop, padBottom);
    },

    echoDivider() {
        shell.echo("---------------------------------------------------------------------------------");
    },

    echoHeader(name) {
        this.echoNewline();
        this.echoDivider();
        this.echo(name, true, true);
        this.echoDivider();
        this.echoNewline();
    },

    echoNewline(count) {
        count = count === undefined || count === null ? 1 : count;
        for (var i = 1; i <= count; i ++) {
            shell.echo(" ");
        }
    },

    echoWarning(message, padTop, padBottom) {
        this.echo(colors.warning("Warning: " + message), padTop, padBottom);
    },

    echoSuccess(message, padTop, padBottom) {
        this.echo(colors.success(message), padTop, padBottom);
    },

    env(name) {
        return shell.env[name];
    },

    exec(command, isSilent) {
        return shell.exec(command, { silent: isSilent === true });
    },
};

var dotnet = {

    build() {
        if (ops.exec("dotnet build").code !== 0) {
            ops.echoError("Failed to build dotnet");
            shell.exit(1);
        }
    },

    publish(publishVersion) {
        ops.echo(`Publishing version '${publishVersion}'...`);

        // Update version number in .csproj files
        shell.ls("**/*.csproj").forEach(function (file) {
            shell.sed("-i", "<Version>(.*)</Version>", `<Version>${publishVersion}</Version>`, file);
        });

        // Update version number in this file
        const property = "version";
        shell.sed("-i", `${property} = \"(.*)\"`, `${property} = "${publishVersion}"`, "sdk");

        // Create new nupkg file
        if (ops.exec("dotnet pack").code !== 0) {
            ops.echoError("Failed to pack dotnet project");
            shell.exit(1);
        }

        // Push nupkg to nuget servers
        const nupkgFile = `src/${projectName}/bin/Debug/${projectName}.${publishVersion}.nupkg`;
        if (ops.exec(`dotnet nuget push ${nupkgFile} -s ${nugetUrl}`).code !== 0) {
            ops.echoError("Failed to publish to nuget");
            shell.exit(1);
        }

        ops.echoSuccess(`Successfully published version ${publishVersion}`);
    },

    test() {
        if (ops.exec("dotnet test -p:CollectCoverage=true -p:CoverletOutputFormat=opencover").code !== 0) {
            ops.echoError("Dotnet tests failed");
            shell.exit(1);
        }

        if (ops.exec("reportgenerator -reports:test/**/coverage.opencover.xml -targetDir:coverage").code !== 0) {
            ops.echoError("Failed to generate coverage report");
            shell.exit(1);
        }
    },
};


/**************************************************************************************************
 * Application Configuration
 **************************************************************************************************/

program
    .version(version)
    .usage("[options]")
    .option("-b, --build",             "Simple wrapper to build dotnet")
    .option("-t, --test",              "Run tests along with coverage")
    .option("-p, --publish [version]", "New version to publish")
    .parse(process.argv);


/**************************************************************************************************
 * Init
 **************************************************************************************************/

if (program.build) {
    dotnet.build();
    shell.exit(0);
}

if (program.publish) {
    dotnet.publish(program.publish);
    shell.exit(0);
}

if (program.test) {
    // Install report generator global tool if not installed
    if (!shell.which("reportgenerator")) {
        ops.exec("dotnet tool install --global dotnet-reportgenerator-globaltool");
        ops.echoSuccess("Installed dotnet reportgenerator global tool");
    }

    dotnet.test();
    shell.exit(0);
}

// Default
program.outputHelp();
shell.exit(0);